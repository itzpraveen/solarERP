version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-solarerp_dev}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - solarerp-dev

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - solarerp-dev

  # Backend Development Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: development
    ports:
      - "5002:5002"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=5002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-solarerp_dev}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - CORS_ORIGIN=http://localhost:3000
      - CLIENT_URL=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./src:/app/src:delegated
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./.env:/app/.env:ro
      - ./uploads:/app/uploads
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev:debug
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - solarerp-dev

  # Frontend Development Server
  frontend:
    image: node:20-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5002
      - REACT_APP_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - WDS_SOCKET_PORT=3000
      - HOST=0.0.0.0
      - PORT=3000
      - GENERATE_SOURCEMAP=true
      - FAST_REFRESH=true
    volumes:
      - ./client-new:/app:delegated
      - frontend_node_modules:/app/node_modules
    command: sh -c "npm install && npm start"
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - solarerp-dev

  # Adminer for database management
  adminer:
    image: adminer:4-standalone
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - solarerp-dev

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - solarerp-dev

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  solarerp-dev:
    driver: bridge